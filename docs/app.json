[{"name":"app.R","content":"#\r\n# This is a Shiny web application. You can run the application by clicking\r\n# the 'Run App' button above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    http://shiny.rstudio.com/\r\n#\r\n\r\n#Published: https://uoe-maths.shinyapps.io/SY2-EstimatorTheory/\r\n\r\n\r\nlibrary(shiny)\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n \r\n    withMathJax(),\r\n    # Application title\r\n    titlePanel(\"Sample Mean Estimator, X̄, for i.i.d. Samples From the Population Distribution.\"),\r\n\r\n    h4(\"This app illustrates the principal of repeated sampling and unbiaseness of the sample mean estimator, \r\n                   X̄, for the population expectation parameter μ. In reality, we can only ever have a \r\n                   single sample from the population (represented in green) and the calculated sample mean estimate, \r\n                   x̄. However, the single sample is only one of many possible datasets obtained from the population \r\n                   distribution, each with their own sample mean estimate. We can examine the sampling distribution for \r\n                   X̄ through simulations for different population distributioins and sample sizes, and assess how \r\n                   good the sample mean is for inferring μ.\"),\r\n    # Sidebar with a slider input for number of bins \r\n    sidebarLayout(\r\n        sidebarPanel(\r\n            \r\n            \r\n            selectInput(\"Dist\", \"Population Distribution:\", \r\n                                   c(\"Normal, N(0,1)\" = \"N\",\r\n                                     \"Binomial, Bin(10,1/3)\" = \"B\",\r\n                                     \"Bernulli, Bern(1/2)\" = \"Bern_half\",\r\n                                     \"Bernulli, Bern(1/50)\" = \"Bern_small\",\r\n                                     \"Exponential, Exp(1)\" = \"E\",\r\n                                     \"Uniform, U(0,1)\" = \"U\")),\r\n            \r\n            selectInput(\"n\", \"Sample Size:\", c(\"n=10\" = \"small\",\r\n                                              \"n=100\" = \"med\",\r\n                                              \"n=1000\" = \"large\")),\r\n\r\n            #selectInput(\"alpha\", \"Confidence Interval:\", c(\"95%\" = \"0.05\",\r\n            #                                   \"90%\" = \"0.1\",\r\n            #                                   \"80%\" = \"0.2\")),\r\n            \r\n            radioButtons(\"clt\", \"Draw the CLT Distribution?\",\r\n                         c(\"No\" = \"N\",\"Yes\" = \"Y\")),\r\n            \r\n            \r\n            actionButton(\"run\", \"Re-run\"),\r\n            \r\n            h3(\"Key:\"),\r\n            h4(\"Green - Available information.\"),\r\n            h4(\"Black - Typically unavailable.\"),\r\n            \r\n            width = 3\r\n            \r\n        ),\r\n        \r\n        \r\n        # Show a plot of the generated distribution\r\n        mainPanel(\r\n           plotOutput(\"Plots\", height = \"1000px\")\r\n        )\r\n    )\r\n)\r\n\r\n# Define server logic required to draw a histogram\r\nserver <- function(input, output) {\r\n    r <- reactiveValues(seed = as.numeric(Sys.time()))\r\n    \r\n    observeEvent(input$run, {\r\n        r$seed = as.numeric(Sys.time())\r\n    })\r\n    \r\n    output$Plots <- renderPlot({\r\n        set.seed(r$seed)\r\n        \r\n        CI <- \"alpha\" %in% names(input)\r\n        if(CI){\r\n          layout(rbind(1,c(2,2,3,3,4,4,5),6,7))\r\n        }else{\r\n          layout(rbind(1,c(2,2,3,3,4,4,5),6))\r\n        }\r\n        \r\n        ###Population plot\r\n        if(input$Dist == \"N\"){\r\n            x <- seq(-4,4,len=1000)\r\n            y <- dnorm(x)\r\n            ylim=c(-0.2,1)*max(y)\r\n            plot(x,y,type=\"l\",xaxt=\"n\",yaxt=\"n\",frame=FALSE,xlab=\"\",ylab=\"\",main=\"Population Distribution\",\r\n                 ylim=ylim,cex.main=2)\r\n            polygon(x,y,density=10,col=1,border=1)\r\n            abline(h=0)\r\n            segments(0,0,0,.Machine$integer.max,col=1,lwd=2)\r\n            text(x = 0, y=0.5*ylim[1], label = expression(mu),cex=2)\r\n            text(-3,0.5*ylim[1],\"-3\",cex=2)\r\n            text(3,0.5*ylim[1],\"3\",cex=2)\r\n        }else if(input$Dist == \"E\"){\r\n            x <- seq(0,6,len=1000)\r\n            y <- dexp(x)\r\n            ylim=c(-0.2,1)*max(y)\r\n            plot(x,y,type=\"l\",xaxt=\"n\",yaxt=\"n\",frame=FALSE,xlab=\"\",ylab=\"\",main=\"Population Distribution\",\r\n                 ylim=ylim,cex.main=2)\r\n            polygon(c(0,x,max(x)),c(0,y,0),density=10,col=1,border=1)\r\n            segments(0,0,0,.Machine$integer.max)\r\n            segments(0,0,.Machine$integer.max,0)\r\n            segments(1,0,1,.Machine$integer.max,col=1,lwd=2)\r\n            text(x = 1, y=0.5*ylim[1], label = expression(mu),cex=2)\r\n            text(0,0.5*ylim[1],\"0\",cex=2)\r\n            text(max(x),0.5*ylim[1],max(x),cex=2)\r\n        }else if(input$Dist == \"B\"){\r\n            x <- 0:10\r\n            y <- dbinom(x, 10, 1/3)\r\n            ylim=c(-0.2,1)*max(y)\r\n            plot(x,y,type=\"h\",xaxt=\"n\",yaxt=\"n\",frame=FALSE,xlab=\"\",ylab=\"\",main=\"Population Distribution\",\r\n                 ylim=ylim,col=1,cex.main=2)\r\n            points(x,y,pch=16,col=2)\r\n            abline(h=0)\r\n            text(0,0.5*ylim[1],\"0\",cex=2)\r\n            text(10,0.5*ylim[1],\"10\",cex=2)\r\n            segments(10*1/3,0,10*1/3,.Machine$integer.max,col=1,lwd=2)\r\n            text(x = 10*1/3, y=0.5*ylim[1], label = expression(mu),cex=2)\r\n        }else if(input$Dist == \"U\"){\r\n            x <- seq(-0.5,1.5,len=1000)\r\n            y <- dunif(x)\r\n            ylim=c(-0.2,1)*max(y)\r\n            plot(x,y,type=\"l\",xaxt=\"n\",yaxt=\"n\",frame=FALSE,xlab=\"\",ylab=\"\",main=\"Population Distribution\",\r\n                 ylim=ylim,cex.main=2)\r\n            polygon(x,y,density=10,col=1,border=1)\r\n            abline(h=0)\r\n            segments(0.5,0,0,.Machine$integer.max,col=1,lwd=2)\r\n            text(x = 0.5, y=0.5*ylim[1], label = expression(mu),cex=2)\r\n            text(0,0.5*ylim[1],\"0\",cex=2)\r\n            text(1,0.5*ylim[1],\"1\",cex=2)\r\n        }else if(input$Dist == \"Bern_half\"){\r\n          x <- 0:1\r\n          y <- dbinom(x, 1, 1/2)\r\n          ylim=c(-0.2,1)\r\n          plot(x,y,type=\"h\",xaxt=\"n\",yaxt=\"n\",frame=FALSE,xlab=\"\",ylab=\"\",main=\"Population Distribution\",\r\n            ylim=ylim,xlim=range(x) + c(-0.5, 0.5), col=1,cex.main=2)\r\n          points(x, y, pch=16,col=2)\r\n          abline(h=0)\r\n          text(0,0.5*ylim[1],\"0\",cex=2)\r\n          text(1,0.5*ylim[1],\"1\",cex=2)\r\n          segments(1/2,0,1/2,.Machine$integer.max,col=1,lwd=2)\r\n          text(x = 1/2, y=0.5*ylim[1], label = expression(mu),cex=2)\r\n        }else if(input$Dist == \"Bern_small\"){\r\n         x <- 0:1\r\n         y <- dbinom(x, 1, 1/50)\r\n         ylim=c(-0.2,1)\r\n         plot(x,y,type=\"h\",xaxt=\"n\",yaxt=\"n\",frame=FALSE,xlab=\"\",ylab=\"\",main=\"Population Distribution\",\r\n              ylim=ylim,xlim=range(x) + c(-0.5, 0.5), col=1,cex.main=2)\r\n         points(x, y, pch=16,col=2)\r\n         abline(h=0)\r\n         text(0,0.5*ylim[1],\"0\",cex=2)\r\n         text(1,0.5*ylim[1],\"1\",cex=2)\r\n         segments(1/50,0,1/50,.Machine$integer.max,col=1,lwd=2)\r\n         text(x = 1/50, y=0.5*ylim[1], label = expression(mu),cex=2)\r\n        }\r\n        \r\n        ##Sample plot\r\n        n <- switch(input$n,\r\n                    \"small\" = 10, \r\n                    \"med\" = 100, \r\n                    \"large\" = 1000)\r\n        f <- switch(input$Dist,\r\n                    \"N\" = function(n){rnorm(n)}, \r\n                    \"B\" = function(n){rbinom(n,size=10,prob=1/3)}, \r\n                    \"Bern_half\" = function(n){rbinom(n,size=1,prob=1/2)}, \r\n                    \"Bern_small\" = function(n){rbinom(n,size=1,prob=1/50)}, \r\n                    \"E\" = function(n){rexp(n)},\r\n                    \"U\" = function(n){runif(n)})\r\n        ftrim <- function(f,n,xlim){\r\n            x <- f(n)\r\n            x <- x[x>=xlim[1] & x <= xlim[2]]\r\n            while(length(x)<n){\r\n                x <- c(x,f(n-length(x)))\r\n                x <- x[x>xlim[1] & x < xlim[2]]\r\n            }\r\n            return(x)\r\n        }\r\n        xlim <- switch(input$Dist,\r\n                       \"N\" = c(-4,4), \r\n                       \"B\" = c(0,10), \r\n                       \"Bern_half\" = c(-0.5,1.5), \r\n                       \"Bern_small\" = c(-0.5,1.5), \r\n                       \"E\" = c(0,6),\r\n                       \"U\" = c(0,1))\r\n        xbar_store <- NULL\r\n        \r\n        for(i in 1:3){\r\n            x <- ftrim(f,n,xlim)\r\n            xbar_store <- c(xbar_store,mean(x))\r\n            if(input$Dist%in%c(\"B\",\"Bern_half\",\"Bern_small\")){\r\n              if(input$Dist == \"B\"){ breaks_upper <- 10 }else{ breaks_upper <- 1 }\r\n              h <- hist(x,plot=FALSE)\r\n              h$mids <- 0:breaks_upper\r\n              h$breaks <- seq(-0.5,breaks_upper + 0.5,by=1)\r\n              h$counts <- as.numeric(table(c(x,0:breaks_upper))-1)\r\n              h$density <- h$counts/sum(diff(h$breaks)*h$counts)\r\n            }else{\r\n              h <- hist(x,plot=FALSE)  \r\n            }\r\n            plot(h, main = paste0(\"Sample \",i),xlim=xlim,ylim=c(0,max(h$counts)*1.1),density=10,col=1+2*(i==1),xlab=\"\",cex.main=2,cex.lab=1.5)\r\n            segments(mean(x),0,mean(x),.Machine$integer.max,lwd=2,col=1+2*(i==1))\r\n            text(x = mean(x)+0.04*diff(xlim), y=max(h$counts)*1.1, label = expression(bar(x)),cex = 2)\r\n        }\r\n        plot(-1:1,rep(0,3),pch=16,cex=2,xlab=\"\",ylab=\"\",frame=FALSE,xaxt=\"n\",yaxt=\"n\",xlim=c(-2,2))\r\n        \r\n        #Estimator\r\n        while(length(xbar_store) < 1000){\r\n            #x <- ftrim(f,n,xlim)\r\n            xbar_store <- c(xbar_store,mean(f(n)))\r\n        }\r\n        mu <- switch(input$Dist,\r\n                     \"N\" = 0, \r\n                     \"B\" = 10*1/3, \r\n                     \"Bern_half\" = 1/2, \r\n                     \"Bern_small\" = 1/50, \r\n                     \"E\" = 1,\r\n                     \"U\" = 0.5)\r\n        h <- hist(xbar_store,plot=FALSE)\r\n        xlim <- switch(input$Dist,\r\n                       \"N\" = 0+c(-4,4)/sqrt(10), \r\n                       \"B\" = 10*1/3 + c(-4,4)*sqrt(2)/3, \r\n                       \"Bern_half\" = 1/2 + c(-4,4)*sqrt(0.5*0.5/10),\r\n                       \"Bern_small\" = 1/50 + c(-4,4)*sqrt((1/50 * (1 - 1/50))/10), \r\n                       \"E\" = 1+c(-4,4)/sqrt(10),\r\n                       \"U\" = 0.5+c(-4,4)/sqrt(120))\r\n        \r\n        plot(h, main = \"Sampling Distribution\", ylim=c(0,max(h$counts)*1.1),density=10,col=1,xlab=\"\",xlim=xlim,cex.main=2,cex.lab=1.5)\r\n        segments(xbar_store[1],0,xbar_store[1],.Machine$integer.max,lwd=2,col=3)\r\n        segments(mu,0,mu,.Machine$integer.max,lwd=2,col=1)\r\n        if(mu>xbar_store[1]){shift <- -1}else{shift <- +1}\r\n        text(x = xbar_store[1]+shift*0.01*diff(xlim), y=max(h$counts)*1.1, label = expression(bar(x)),cex = 2)\r\n        text(x = mu-shift*0.01*diff(xlim), y=max(h$counts)*1.1, label = expression(mu),cex = 2)\r\n        \r\n        if(input$clt == \"Y\"){\r\n            a <- seq(xlim[1],xlim[2],len=1000)\r\n            s <- switch(input$Dist,\r\n                        \"N\" = 1/sqrt(n), \r\n                        \"B\" = sqrt(mu*(10-mu)/(10*n)), \r\n                        \"Bern_half\" = sqrt(mu*(1-mu)/(n)), \r\n                        \"Bern_small\" = sqrt(mu*(1-mu)/(n)), \r\n                        \"E\" = mu/sqrt(n),\r\n                        \"U\" = 1/sqrt(12*n))\r\n            scale <- h$counts[1]/h$density[1]\r\n            lines(a,dnorm(a,mu,s)*scale,lty=1,col=1,lwd=2)\r\n        }\r\n        \r\n        \r\n        ##CI\r\n        if(CI){\r\n          maxidx <- 40#length(xbar_store)\r\n          IDX <- 1:maxidx\r\n          se_store <- switch(input$Dist,\r\n                      \"N\" = rep(1/sqrt(n),length(xbar_store)), \r\n                      \"B\" = sqrt(xbar_store*(10-xbar_store)/(10*n)), \r\n                      \"Bern_half\" = sqrt(xbar_store*(1-xbar_store)/(n)), \r\n                      \"Bern_small\" = sqrt(xbar_store*(1-xbar_store)/(n)), \r\n                      \"E\" = xbar_store/sqrt(n),\r\n                      \"U\" = rep(1/sqrt(12*n),length(xbar_store)))\r\n          alpha <- as.numeric(input$alpha)\r\n          LOW <- xbar_store[IDX] - qnorm(1-alpha/2)*se_store[IDX]\r\n          UPP <- xbar_store[IDX] + qnorm(1-alpha/2)*se_store[IDX]\r\n          pch <- 1 + 15*as.numeric(mu > LOW & mu < UPP)\r\n          rng <- max(c(abs(LOW-mu),abs(UPP-mu)))\r\n          ylim <- mu+c(-1,1)*rng\r\n          plot(IDX,xbar_store[IDX],xlab=\"\",ylab=\"\",xaxt=\"n\",ylim = ylim,\r\n               frame=FALSE,pch=pch,cex=3,col=c(3,rep(1,length(IDX)-1)), \r\n               main = \"Confidence Intervals\",cex.main=2)\r\n          segments(IDX,LOW,IDX,UPP,col=c(3,rep(1,length(IDX)-1)))\r\n          abline(h=mu, col = 1)\r\n          text(0,mu+0.1*rng,expression(mu),cex=2)\r\n        }  \r\n    })\r\n    \r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
